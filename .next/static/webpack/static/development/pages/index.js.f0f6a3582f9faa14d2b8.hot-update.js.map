{"version":3,"file":"static/webpack/static/development/pages/index.js.f0f6a3582f9faa14d2b8.hot-update.js","sources":["webpack:///./pages/index.tsx"],"sourcesContent":["import * as React from 'react'\nimport Link from 'next/link'\nimport {QuizContext} from '../GlobalContext/context'\nimport styled from 'styled-components'\n\nconst IconLoading = styled.div`\n  font-size: 20vw\n`\nclass QuizDescription extends React.Component {\n    render() {\n        let quiz = this.props.quiz\n        let image = quiz.image\n        let htmlDescription = function () { return { __html: quiz.introduction } }\n\n        return (\n            <section className=\"overviewSection\">\n                <div className=\"imageWrapper\">\n                    <img src={image.filePath} alt={image.altText} />\n                </div>\n                <div className=\"description\" dangerouslySetInnerHTML={htmlDescription()} />\n                <button onClick={this.props.showQuizQuestion}>Begin</button>\n            </section>\n        )\n    }\n}\n\nclass Quizinator extends React.Component {\n    render() {\n        let quiz = this.props.quiz,\n            question = this.props.quiz.questions[this.props.currentQuestionIndex],\n            htmlQuestion = function () {\n                return { __html: question.question }\n            },\n            answerButtons = question.answers.map((answer, i) =>\n                <p key={i}><button className={answer.answer} onClick={this.handleClick.bind(this, i)} disabled={this.props.buttonsDisabled}>{answer}</button></p>\n        )\n\n        return (\n            <section className={'quizSection' + (this.props.buttonsDisabled ? ' transitionOut' : '')}>\n                <div className=\"questionNumber\">Question {this.props.currentQuestionIndex + 1} / {quiz.questions.length}</div>\n                <hr />\n                <div className=\"question\">\n                    <div dangerouslySetInnerHTML={htmlQuestion()} />\n                </div>\n                <div className=\"answers\">\n                    {answerButtons}\n                </div>\n            </section>\n        )\n    }\n\n    handleClick(index, event) {\n        let question = this.props.quiz.questions[this.props.currentQuestionIndex],\n            answer = { value: index + 1, isCorrect: (index + 1 === question.correct) },\n            target = event.currentTarget\n\n        this.props.submitAnswer(answer)\n\n        target.classList.add('clicked', answer.isCorrect ? 'correct' : 'incorrect')\n\n        window.setTimeout(function () {\n            target.classList.remove('clicked', 'correct', 'incorrect')\n        }, this.props.transitionDelay)\n    }\n}\n\nclass QuizResults extends React.Component {\n    render() {\n        const badgeStyle = {\n            backgroundImage: `url(${this.props.thumbnail.filePath})`,\n            width: this.props.thumbnail.height,\n            height: this.props.thumbnail.height,\n            lineHeight: this.props.thumbnail.height + 'px'\n        }\n        \n        let numCorrect = 0, score = 0, possibleScore = 0\n\n        this.props.results.forEach((answer) => {\n            if (!!answer.isCorrect) {\n                numCorrect += 1\n                score += ((answer.level || 1) * 10)\n            }\n            possibleScore += ((answer.level || 1) * 10)\n        })\n        \n        const results = this.props.results.map((item, i) => {\n            let questionHtml = function () { return { __html: item.question } }\n            let explanationHtml = function () { return { __html: item.explanation } }\n            let response =\n                (item.isCorrect === true) ?\n                    \"You correctly answered \" :\n                (item.isCorrect === false) ? \n                    `You answered ${item.answers[item.value - 1]}. The correct answer is ` :\n                    \"The correct answer is \"\n\n            return (\n                <li className={\"result\" + (item.isCorrect ? \" correct\" : \" incorrect\")} key={i}>\n                    <div className=\"question\" dangerouslySetInnerHTML={questionHtml()} />\n                    <div className=\"response\">\n                        {response} <b>{item.answers[item.correct - 1]}</b>\n                    </div>\n                    <p className=\"explanation\">\n                        <i dangerouslySetInnerHTML={explanationHtml()} />\n                    </p>\n                </li>\n            )\n        })\n\n        return (\n            <section className=\"resultsSection\">\n                <h2>Results</h2>\n                <div className=\"scoring\">\n                    You got <em>{numCorrect}</em> correct scoring a total of <b>{score}</b> out of a possible <b>{possibleScore}</b>.\n                </div>\n                <div className=\"badge\" style={badgeStyle}>{score}</div>\n                <ol>{results}</ol>\n            </section>\n        )\n    }\n}\n\n\nclass Home extends React.Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            quiz: this.getData(),\n            activeView: null,\n            currentQuestionIndex: 0,\n            answers: []\n        }\n\n        this.submitAnswer = this.submitAnswer.bind(this)\n    }\n    \n    render() {\n        return (\n            <div className=\"App\">\n                \n                {this.state.activeView === 'quizOverview' &&\n                    <QuizDescription\n                        quiz={this.state.quiz}\n                        showQuizQuestion={this.showQuizQuestion.bind(this, 0)}\n                    />\n                }\n                {this.state.activeView === 'quizQuestions' &&\n                    <Quizinator\n                        submitAnswer={this.submitAnswer}\n                        quiz={this.state.quiz}\n                        currentQuestionIndex={this.state.currentQuestionIndex}\n                        buttonsDisabled={this.state.buttonsDisabled}\n                        transitionDelay={this.state.transitionDelay}\n                    />\n                }\n                {this.state.activeView === 'quizResults' &&\n                    <QuizResults\n                        results={this.getResults()}\n                        thumbnail={this.state.quiz.thumbnail}\n                    />\n                }\n            </div>\n        )\n    }\n\n    componentDidMount() {\n        this.showQuizDescription()\n    }\n\n    getData() {\n        return {quiz}\n    }\n\n    showQuizDescription() {\n        this.setState((prevState, props) => {\n            return {\n                activeView: 'quizOverview'\n            }\n        })\n    }\n    \n    showQuizQuestion(index) {\n        console.log(index)\n        this.setState((prevState) => {\n            return {\n                currentQuestionIndex: index,\n                activeView: 'quizQuestions',\n                buttonsDisabled: false,\n                transitionDelay: 1000\n            }\n        })\n    }\n    \n    showResults() {\n        this.setState((prevState) => {\n            return {\n                activeView: 'quizResults'\n            }\n        })\n    }\n\n    submitAnswer(answer) {\n        var app = this\n\n        // save answer and disable button clicks\n        this.setState((prevState) => {\n            return {\n                buttonsDisabled: true,\n                answers: Object.assign({ [this.state.currentQuestionIndex]: answer }, prevState.answers)\n            }\n        })\n        \n        // pause for question result to show before callback\n        window.setTimeout(function () {\n\n            // determine if there are any other questions to show or show results\n            let nextIndex = app.state.currentQuestionIndex + 1,\n                hasMoreQuestions = (nextIndex < app.state.quiz.numOfQuestions)\n\n            (hasMoreQuestions) ? app.showQuizQuestion(nextIndex) : app.showResults()\n            \n        }, this.state.transitionDelay)\n    }\n    \n    getResults() {\n        return this.state.quiz.questions.map((item, index) => {\n            return Object.assign({}, item, this.state.answers[index])\n        })\n    }\n\n}\n\nexport { Home }\nexport default Home\n"],"mappings":"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","sourceRoot":""}